import { useQuery } from "@tanstack/react-query";
import { useSelector } from "react-redux"; // Assuming the user's email is stored in Redux

const T = () => {
  const user = useSelector((state) => state.auth.user); // Fetch user's email from Redux


  if (!user) {
    return <div>Please log in to see your tasks.</div>;
  }

  const {
    isLoading,
    error,
    data: tasks,
  } = useQuery({
    queryKey: ["tasks", user.email], // Include email in queryKey
    queryFn: async () => {
      const res = await fetch(
        `https://flowmate-serverside-ecru.vercel.app/createTask?email=${user.email}&stage=todo` // Fetch tasks for the logged-in user in "in progress" stage
      );
      if (!res.ok) {
        throw new Error("Network response was not ok");
      }
      return res.json();
    },
  });

  if (isLoading) {
    return <div>Loading.....</div>;
  }

  if (error) {
    return <div>Error loading tasks</div>;
  }

  return (
    <div className="p-4 w-80 mx-auto bg-white rounded-lg shadow-md">
      <h2 className="text-lg font-semibold text-gray-700 mb-4">Todo Tasks</h2>
<div>
      {tasks.length === 0 ? (
        <div className="text-gray-500">No tasks in todo recently</div>
      ) : (
        tasks.map((task) =>
          task.email === user.email && ( (
            <div key={task._id} className="p-2 mb-2 bg-gray-100 rounded-md flex justify-between items-center">
              <span className={`text-gray-800 ${task.completed ? "line-through" : ""}`}>
                {task.taskTitle.slice(0, 35)}
              </span>
            </div>
          ))
        ))}
        </div>
    </div>
  );
};

export default T;








// import { useQuery } from "@tanstack/react-query";
// const InProgress = () => {
//   const {
//     isLoading,
//     error,
//     data: todos,
//     refetch,
//   } = useQuery({
//     queryKey: ["todos"],
//     queryFn: async () => {
//       const res = await fetch("https://flowmate-serverside-ecru.vercel.app/createTask");

//       if (!res.ok) {
//         throw new Error("Network response was not ok");
//       }
//       return res.json();
//     },
//   });
//   if (isLoading) {
//     return <div>Loading.....</div>;
//   }

//   if (error) {
//     return <div>Error loading products</div>;
//   }

//   const filteredTodos = todos.filter((todo) => todo.stage === "in progress");

//   return (
//     <div className="p-4 w-80 mx-auto bg-white rounded-lg shadow-md">
//       <h2 className="text-lg font-semibold text-gray-700 mb-4">Todos</h2>

//       {/* Show message if there are no todos */}
//       {filteredTodos.length === 0 ? (
//         <div className="text-gray-500">No tasks inprogress recently</div>
//       ) : (
//         // Existing todos
//         filteredTodos.map((todo) => (
//           <div
//             key={todo.id}
//             className="p-2 mb-2 bg-gray-100 rounded-md flex justify-between items-center"
//           >
//             <span
//               className={`text-gray-800 ${
//                 todo?.completed ? "line-through" : ""
//               }`}
//             >
//               {todo.taskTitle.slice(0, 35)}
//             </span>
//           </div>
//         ))
//       )}
//     </div>
//   );
// };

// export default InProgress;

import { useQuery } from "@tanstack/react-query";
import { useSelector } from "react-redux"; // Assuming the user's email is stored in Redux

const InProgress = () => {
  const user = useSelector((state) => state.auth.user); // Fetch user's email from Redux


  if (!user) {
    return <div>Please log in to see your tasks.</div>;
  }

  const {
    isLoading,
    error,
    data: tasks,
  } = useQuery({
    queryKey: ["tasks", user.email], // Include email in queryKey
    queryFn: async () => {
      const res = await fetch(
        `https://flowmate-serverside-ecru.vercel.app/createTask?email=${user.email}&stage=in progress` // Fetch tasks for the logged-in user in "in progress" stage
      );
      if (!res.ok) {
        throw new Error("Network response was not ok");
      }
      return res.json();
    },
  });

  if (isLoading) {
    return <div>Loading.....</div>;
  }

  if (error) {
    return <div>Error loading tasks</div>;
  }

  return (
    <div className="p-4 w-80 mx-auto bg-white rounded-lg shadow-md">
      <h2 className="text-lg font-semibold text-gray-700 mb-4">In Progress Tasks</h2>
<div>
      {tasks.length === 0 ? (
        <div className="text-gray-500">No tasks in progress recently</div>
      ) : (
        tasks.map((task) =>
          task.email === user.email && ( (
            <div key={task._id} className="p-2 mb-2 bg-gray-100 rounded-md flex justify-between items-center">
              <span className={`text-gray-800 ${task.completed ? "line-through" : ""}`}>
                {task.taskTitle.slice(0, 35)}
              </span>
            </div>
          ))
        ))}
        </div>
    </div>
  );
};

export default InProgress;












import { useQuery } from "@tanstack/react-query";
import { useSelector } from "react-redux"; // Assuming the user's email is stored in Redux

const Completed = () => {
  const user = useSelector((state) => state.auth.user); // Fetch user's email from Redux

  if (!user) {
    return <div>Please log in to see your tasks.</div>;
  }

  const {
    isLoading,
    error,
    data: tasks,
  } = useQuery({
    queryKey: ["tasks", user.email], // Include email in queryKey
    queryFn: async () => {
      const res = await fetch(
        `https://flowmate-serverside-ecru.vercel.app/createTask?email=${user.email}&stage=done` // Fetch tasks for the logged-in user in "in progress" stage
      );
      if (!res.ok) {
        throw new Error("Network response was not ok");
      }
      return res.json();
    },
  });

  if (isLoading) {
    return <div>Loading.....</div>;
  }

  if (error) {
    return <div>Error loading tasks</div>;
  }

  return (
    <div className="p-4 w-80 mx-auto bg-white rounded-lg shadow-md">
      <h2 className="text-lg font-semibold text-gray-700 mb-4">
        Completed Tasks
      </h2>
      <div>
        {tasks.length === 0 ? (
          <div className="text-gray-500">No tasks in done recently</div>
        ) : (
          tasks.map(
            (task) =>
              task.email === user.email && (
                <div
                  key={task._id}
                  className="p-2 mb-2 bg-gray-100 rounded-md flex justify-between items-center"
                >
                  <span
                    className={`text-gray-800 ${
                      task.completed ? "line-through" : ""
                    }`}
                  >
                    {task.taskTitle.slice(0, 35)}
                  </span>
                </div>
              )
          )
        )}
      </div>
    </div>
  );
};

export default Completed;
